# Production-optimized Dockerfile
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies for build with legacy peer deps
RUN npm ci --include=dev --legacy-peer-deps

# Copy application code
COPY . .

# Build if needed (for TypeScript projects)
# RUN npm run build

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install production dependencies only with legacy peer deps
COPY package*.json ./
RUN npm ci --omit=dev --legacy-peer-deps && npm cache clean --force

# Copy application code
COPY --from=builder /app/src ./src
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/data ./data
COPY --from=builder /app/monitoring ./monitoring
COPY --from=builder /app/tests ./tests
COPY --from=builder /app/docs ./docs
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/public ./public

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:8080/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})" || exit 1

EXPOSE 8080

CMD ["node", "src/server.js"]
